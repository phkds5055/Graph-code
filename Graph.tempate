### 그래프 스타일 및 단위 전환

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

file_path = r"C:\Users\USER\.spyder-py3\market_data.xlsx"

# 엑셀 파일 읽기 및 데이터 전처리
software_market_cap_df = pd.read_excel(file_path, sheet_name="SM")
software_market_cap_df.rename(columns={software_market_cap_df.columns[0]: "Date"}, inplace=True)
software_market_cap_df["Date"] = pd.to_datetime(software_market_cap_df["Date"], errors="coerce")
software_market_cap_df.dropna(subset=["Date"], inplace=True)
software_market_cap_df.set_index("Date", inplace=True)

# 관심 티커 목록
software_tickers = ["PLTR US Equity", "CRM US Equity", "NOW US Equity", "INTU US Equity", 
                    "ORCL US Equity", "PANW US Equity", "CRWD US Equity", "ADBE US Equity"]

# 원본 데이터가 백만 단위라고 가정하여, 십억 단위로 변환 (백만 -> 십억: /1000)
software_market_cap_df[software_tickers] = software_market_cap_df[software_tickers] / 1000

# 그래프 스타일 설정 및 플롯 그리기
plt.style.use("ggplot")
plt.figure(figsize=(14, 7))
colors = ["blue", "red", "green", "purple", "orange", "cyan", "magenta", "brown"]
for i, ticker_name in enumerate(software_tickers):
    plt.plot(software_market_cap_df.index, software_market_cap_df[ticker_name], 
             label=ticker_name.replace(" US Equity", ""), color=colors[i], linewidth=2)

plt.title("Software Market Cap (2021-Present)", fontsize=14, fontweight="bold")
plt.xlabel("Year", fontsize=12)
plt.ylabel("Market Cap (Billion USD)", fontsize=12)
plt.legend(fontsize=10, loc="upper left")
plt.grid(True, linestyle="--", alpha=0.5)
plt.xticks(rotation=45, ha="right")

# Y축의 단위를 십억 단위로 표시
def billion_formatter(x, pos):
    return f'{x:.0f}B'
plt.gca().yaxis.set_major_formatter(ticker.FuncFormatter(billion_formatter))

plt.show()

#####

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

file_path = r"C:\Users\USER\.spyder-py3\market_data.xlsx"

# 엑셀 파일 읽기 및 데이터 전처리
hardware_market_cap_df = pd.read_excel(file_path, sheet_name="HM")
hardware_market_cap_df.rename(columns={hardware_market_cap_df.columns[0]: "Date"}, inplace=True)
hardware_market_cap_df["Date"] = pd.to_datetime(hardware_market_cap_df["Date"], errors="coerce")
hardware_market_cap_df.dropna(subset=["Date"], inplace=True)
hardware_market_cap_df.set_index("Date", inplace=True)

# 관심 티커 목록
hardware_tickers = ["INTC US Equity", "NVDA US Equity", "AVGO US Equity", "AMD US Equity"]

# 엑셀 파일의 값이 백만 단위라 가정하여, 십억 단위로 변환 (백만 → 십억: /1000)
hardware_market_cap_df[hardware_tickers] = hardware_market_cap_df[hardware_tickers] / 1000

# 그래프 플롯 설정
plt.figure(figsize=(14, 7))
colors = ["blue", "red", "green", "purple"]
linestyles = ["-", "--", "-.", ":"]
linewidths = [2.5, 2, 2, 2]

for i, ticker_name in enumerate(hardware_tickers):
    plt.plot(hardware_market_cap_df.index, hardware_market_cap_df[ticker_name], 
             label=ticker_name.replace(" US Equity", ""), 
             color=colors[i], linestyle=linestyles[i], linewidth=linewidths[i])

plt.title("Semiconductor Market Cap (2016-Present)", fontsize=14, fontweight="bold")
plt.xlabel("Year", fontsize=12)
plt.ylabel("Market Cap (Billion USD)", fontsize=12)
plt.xticks(rotation=45, ha="right")
plt.legend(loc="upper left", fontsize=10, frameon=True)
plt.grid(True, linestyle="--", alpha=0.5)

# Y축 단위를 십억 단위로 표시하기 위한 함수 정의
def billion_formatter(x, pos):
    return f'{x:.0f}B'
plt.gca().yaxis.set_major_formatter(ticker.FuncFormatter(billion_formatter))

plt.show()

###
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

file_path = r"C:\Users\USER\.spyder-py3\market_data.xlsx"

vix_sp500_df = pd.read_excel(file_path, sheet_name="VIX")


vix_sp500_df.rename(columns={vix_sp500_df.columns[0]: "Date"}, inplace=True)
vix_sp500_df["Date"] = pd.to_datetime(vix_sp500_df["Date"], errors="coerce")
vix_sp500_df.dropna(subset=["Date"], inplace=True)
vix_sp500_df.set_index("Date", inplace=True)


vix_sp500_df = vix_sp500_df.resample("M").mean()

plt.figure(figsize=(14, 7))
plt.plot(vix_sp500_df["VIX Index"], label="VIX", color="blue", linewidth=2)
plt.plot(vix_sp500_df["SPX INDEX"], label="S&P 500 Forward P/E", color="red", linewidth=2)

plt.title("VIX & S&P 500 12M Forward P/E (1995-Present)", fontsize=14, fontweight="bold")
plt.xlabel("Year", fontsize=12)
plt.ylabel("Index Value", fontsize=12)
plt.legend(fontsize=10, loc="upper right")
plt.grid(True, linestyle="--", alpha=0.5)
plt.xticks(rotation=45, ha="right")

plt.show()


####
import plotly.graph_objects as go
import pandas as pd

# 엑셀 파일 로드
software_market_cap_df = pd.read_excel("market_data.xlsx", sheet_name="소프트웨어 시총")
hardware_market_cap_df = pd.read_excel("market_data.xlsx", sheet_name="하드웨어 시총")
vix_sp500_df = pd.read_excel("market_data.xlsx", sheet_name="VIX")

# 날짜 컬럼 변환
software_market_cap_df["Date"] = pd.to_datetime(software_market_cap_df["Date"], errors="coerce")
hardware_market_cap_df["Date"] = pd.to_datetime(hardware_market_cap_df["Date"], errors="coerce")
vix_sp500_df["Date"] = pd.to_datetime(vix_sp500_df["Date"], errors="coerce")

# NaT 값 제거
software_market_cap_df.dropna(subset=["Date"], inplace=True)
hardware_market_cap_df.dropna(subset=["Date"], inplace=True)
vix_sp500_df.dropna(subset=["Date"], inplace=True)

# 1) 소프트웨어 기업 시가총액 (2021년 이후)
fig = go.Figure()
software_tickers = ["PLTR", "CRM", "NOW", "INTU", "ORCL", "PANW", "CRWD", "ADBE"]
colors = ['rgb(67,67,67)', 'rgb(115,115,115)', 'rgb(49,130,189)', 'rgb(189,189,189)', 'rgb(44,160,44)', 'rgb(255,127,14)', 'rgb(214,39,40)', 'rgb(148,103,189)']

for ticker, color in zip(software_tickers, colors):
    fig.add_trace(go.Scatter(x=software_market_cap_df["Date"], y=software_market_cap_df[ticker], mode='lines', name=ticker, line=dict(color=color)))

fig.update_layout(title="Software Market Cap (2021-Present)", xaxis_title="Date", yaxis_title="Market Cap (Billion USD)", template="plotly_white", showlegend=True)
fig.show()

# 2) PLTR과 IGB ETF 상관계수 rolling corr(50)
software_market_cap_df["PLTR_rolling_corr"] = software_market_cap_df["PLTR"].rolling(50).corr(software_market_cap_df["IGB"])

fig = go.Figure()
fig.add_trace(go.Scatter(x=software_market_cap_df["Date"], y=software_market_cap_df["PLTR_rolling_corr"], mode='lines', name="PLTR - IGB Rolling Corr (50)", line=dict(color='rgb(49,130,189)')))
fig.update_layout(title="PLTR & IGB ETF Rolling Correlation (50) - 2021-Present", xaxis_title="Date", yaxis_title="Correlation", template="plotly_white")
fig.show()

# 3) 반도체 기업 시가총액 (2016년 이후)
fig = go.Figure()
semi_tickers = ["INTC", "NVDA", "AVGO", "AMD"]
colors = ['rgb(67,67,67)', 'rgb(115,115,115)', 'rgb(49,130,189)', 'rgb(189,189,189)']

for ticker, color in zip(semi_tickers, colors):
    fig.add_trace(go.Scatter(x=hardware_market_cap_df["Date"], y=hardware_market_cap_df[ticker], mode='lines', name=ticker, line=dict(color=color)))

fig.update_layout(title="Semiconductor Market Cap (2016-Present)", xaxis_title="Date", yaxis_title="Market Cap (Billion USD)", template="plotly_white", showlegend=True)
fig.show()

# 4) NVDA와 SOXX ETF rolling corr(50)
hardware_market_cap_df["NVDA_rolling_corr"] = hardware_market_cap_df["NVDA"].rolling(50).corr(hardware_market_cap_df["SOXX"])

fig = go.Figure()
fig.add_trace(go.Scatter(x=hardware_market_cap_df["Date"], y=hardware_market_cap_df["NVDA_rolling_corr"], mode='lines', name="NVDA - SOXX Rolling Corr (50)", line=dict(color='rgb(49,130,189)')))
fig.update_layout(title="NVDA & SOXX ETF Rolling Correlation (50) - 2016-Present", xaxis_title="Date", yaxis_title="Correlation", template="plotly_white")
fig.show()

# 5) VIX와 S&P 500 12개월 Forward P/E (1995년 이후, 월별)
vix_sp500_df.set_index("Date", inplace=True)
vix_sp500_df = vix_sp500_df.resample("M").mean()

fig = go.Figure()
fig.add_trace(go.Scatter(x=vix_sp500_df.index, y=vix_sp500_df["VIX"], mode='lines', name="VIX", line=dict(color='rgb(214,39,40)')))
fig.add_trace(go.Scatter(x=vix_sp500_df.index, y=vix_sp500_df["S&P 500 Forward P/E"], mode='lines', name="S&P 500 Forward P/E", line=dict(color='rgb(49,130,189)')))
fig.update_layout(title="VIX & S&P 500 12M Forward P/E (1995-Present)", xaxis_title="Date", yaxis_title="Value", template="plotly_white", showlegend=True)
fig.show()

#####

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

# 파일 경로 설정
file_path = r"C:\Users\USER\.spyder-py3\market_data.xlsx"

# ✅ 엑셀 시트 로드 & 시트명 확인
xls = pd.ExcelFile(file_path, engine="openpyxl")
print("Available Sheets:", xls.sheet_names)

# ✅ 2) PLTR과 IGB ETF 상관계수 rolling corr(50)
software_price_df = pd.read_excel(file_path, sheet_name="SP", engine="openpyxl")
software_price_df.rename(columns={software_price_df.columns[0]: "Date"}, inplace=True)
software_price_df.columns = software_price_df.columns.str.replace(" US Equity", "", regex=True)
software_price_df["Date"] = pd.to_datetime(software_price_df["Date"], errors="coerce")
software_price_df.dropna(subset=["Date"], inplace=True)
software_price_df.set_index("Date", inplace=True)
software_price_df["PLTR_rolling_corr"] = software_price_df["PLTR"].rolling(50, min_periods=30).corr(software_price_df["IGV"]) 
plt.figure(figsize=(14, 7))
plt.plot(software_price_df.index, software_price_df["PLTR_rolling_corr"], label="PLTR - IGB Rolling Corr (50)", color="blue", linewidth=2)
plt.title("PLTR & IGB ETF Rolling Correlation (50) - 2021-Present", fontsize=14, fontweight="bold")
plt.xlabel("Year", fontsize=12)
plt.ylabel("Correlation", fontsize=12)
plt.legend(fontsize=10, loc="upper left")
plt.grid(True, linestyle="--", alpha=0.5)
plt.xticks(rotation=45, ha="right")
plt.show()

# ✅ 4) NVDA와 SOXX ETF rolling corr(50)
hardware_price_df = pd.read_excel(file_path, sheet_name="HP", engine="openpyxl")
hardware_price_df.rename(columns={hardware_price_df.columns[0]: "Date"}, inplace=True)
hardware_price_df.columns = hardware_price_df.columns.str.replace(" US Equity", "", regex=True)
hardware_price_df["Date"] = pd.to_datetime(hardware_price_df["Date"], errors="coerce")
hardware_price_df.dropna(subset=["Date"], inplace=True)
hardware_price_df.set_index("Date", inplace=True)
hardware_price_df["NVDA_rolling_corr"] = hardware_price_df["NVDA"].rolling(50, min_periods=30).corr(hardware_price_df["SOXX"]) 
plt.figure(figsize=(14, 7))
plt.plot(hardware_price_df.index, hardware_price_df["NVDA_rolling_corr"], label="NVDA - SOXX Rolling Corr (50)", color="blue", linewidth=2)
plt.title("NVDA & SOXX ETF Rolling Correlation (50) - 2016-Present", fontsize=14, fontweight="bold")
plt.xlabel("Year", fontsize=12)
plt.ylabel("Correlation", fontsize=12)
plt.legend(fontsize=10, loc="upper left")
plt.grid(True, linestyle="--", alpha=0.5)
plt.xticks(rotation=45, ha="right")
plt.show()

####
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

# 파일 경로 설정
file_path = r"C:\Users\USER\.spyder-py3\market_data.xlsx"

# ✅ 엑셀 시트 로드 & 시트명 확인
xls = pd.ExcelFile(file_path, engine="openpyxl")
print("Available Sheets:", xls.sheet_names)

# ✅ 2) PLTR과 IGB ETF 상관계수 rolling corr(50)
software_price_df = pd.read_excel(file_path, sheet_name="SP", engine="openpyxl")
software_price_df.rename(columns={software_price_df.columns[0]: "Date"}, inplace=True)
software_price_df.columns = software_price_df.columns.str.replace(" US Equity", "", regex=True)
software_price_df["Date"] = pd.to_datetime(software_price_df["Date"], errors="coerce")
software_price_df.dropna(subset=["Date"], inplace=True)
software_price_df.set_index("Date", inplace=True)
software_price_df["PLTR_rolling_corr_30"] = software_price_df["PLTR"].rolling(30, min_periods=20).corr(software_price_df["IGV"])
software_price_df["PLTR_rolling_corr_100"] = software_price_df["PLTR"].rolling(100, min_periods=50).corr(software_price_df["IGV"])  
plt.figure(figsize=(14, 7))
plt.plot(software_price_df.index, software_price_df["PLTR_rolling_corr"], label="PLTR - IGB Rolling Corr (50)", color="blue", linewidth=2)
plt.title("PLTR & IGB ETF Rolling Correlation (50) - 2021-Present", fontsize=14, fontweight="bold")
plt.xlabel("Year", fontsize=12)
plt.ylabel("Correlation", fontsize=12)
plt.legend(fontsize=10, loc="upper left")
plt.grid(True, linestyle="--", alpha=0.5)
plt.xticks(rotation=45, ha="right")
plt.show()

# ✅ 4) NVDA와 SOXX ETF rolling corr(50)
hardware_price_df = pd.read_excel(file_path, sheet_name="HP", engine="openpyxl")
hardware_price_df.rename(columns={hardware_price_df.columns[0]: "Date"}, inplace=True)
hardware_price_df.columns = hardware_price_df.columns.str.replace(" US Equity", "", regex=True)
hardware_price_df["Date"] = pd.to_datetime(hardware_price_df["Date"], errors="coerce")
hardware_price_df.dropna(subset=["Date"], inplace=True)
hardware_price_df.set_index("Date", inplace=True)
hardware_price_df["NVDA_rolling_corr_30"] = hardware_price_df["NVDA"].rolling(30, min_periods=20).corr(hardware_price_df["SOXX"])
hardware_price_df["NVDA_rolling_corr_100"] = hardware_price_df["NVDA"].rolling(100, min_periods=50).corr(hardware_price_df["SOXX"]) 
plt.figure(figsize=(14, 7))
plt.plot(hardware_price_df.index, hardware_price_df["NVDA_rolling_corr"], label="NVDA - SOXX Rolling Corr (50)", color="blue", linewidth=2)
plt.title("NVDA & SOXX ETF Rolling Correlation (50) - 2016-Present", fontsize=14, fontweight="bold")
plt.xlabel("Year", fontsize=12)
plt.ylabel("Correlation", fontsize=12)
plt.legend(fontsize=10, loc="upper left")
plt.grid(True, linestyle="--", alpha=0.5)
plt.xticks(rotation=45, ha="right")
plt.show()

###
import pandas as pd
import plotly.graph_objects as go

file_path = r"C:\Users\USER\.spyder-py3\market_data.xlsx"

# 엑셀 파일 읽기 및 데이터 전처리
hardware_market_cap_df = pd.read_excel(file_path, sheet_name="HM")
hardware_market_cap_df.rename(columns={hardware_market_cap_df.columns[0]: "Date"}, inplace=True)
hardware_market_cap_df["Date"] = pd.to_datetime(hardware_market_cap_df["Date"], errors="coerce")
hardware_market_cap_df.dropna(subset=["Date"], inplace=True)
hardware_market_cap_df.set_index("Date", inplace=True)

# 관심 티커 목록 및 단위 변환 (백만 -> 십억)
hardware_tickers = ["INTC US Equity", "NVDA US Equity", "AVGO US Equity", "AMD US Equity"]
hardware_market_cap_df[hardware_tickers] = hardware_market_cap_df[hardware_tickers] / 1000

# 스타일 설정
colors = ["blue", "red", "green", "purple"]
dash_styles = ["solid", "dash", "dashdot", "dot"]
linewidths = [2.5, 2, 2, 2]

# Plotly Figure 생성
fig = go.Figure()

for i, ticker in enumerate(hardware_tickers):
    fig.add_trace(go.Scatter(
        x=hardware_market_cap_df.index,
        y=hardware_market_cap_df[ticker],
        mode="lines",
        name=ticker.replace(" US Equity", ""),
        line=dict(color=colors[i], dash=dash_styles[i], width=linewidths[i])
    ))

fig.update_layout(
    title="Semiconductor Market Cap (2016-Present)",
    xaxis_title="Year",
    yaxis_title="Market Cap (Billion USD)",
    xaxis=dict(tickangle=45, showgrid=True, gridcolor="LightGray"),
    yaxis=dict(showgrid=True, gridcolor="LightGray", tickformat=".0fB"),
    template="plotly_white",
    legend=dict(x=0.01, y=0.99)
)

fig.show()

###
import pandas as pd
import plotly.graph_objects as go

file_path = r"C:\Users\USER\.spyder-py3\market_data.xlsx"

# 엑셀 파일 읽기 및 데이터 전처리
software_market_cap_df = pd.read_excel(file_path, sheet_name="SM")
software_market_cap_df.rename(columns={software_market_cap_df.columns[0]: "Date"}, inplace=True)
software_market_cap_df["Date"] = pd.to_datetime(software_market_cap_df["Date"], errors="coerce")
software_market_cap_df.dropna(subset=["Date"], inplace=True)
software_market_cap_df.set_index("Date", inplace=True)

# 관심 티커 목록 및 단위 변환 (백만 단위 -> 십억 단위: /1000)
software_tickers = ["PLTR US Equity", "CRM US Equity", "NOW US Equity", "INTU US Equity", 
                    "ORCL US Equity", "PANW US Equity", "CRWD US Equity", "ADBE US Equity"]
software_market_cap_df[software_tickers] = software_market_cap_df[software_tickers] / 1000

# Plotly Figure 생성
colors = ["blue", "red", "green", "purple", "orange", "cyan", "magenta", "brown"]
fig = go.Figure()

for i, ticker in enumerate(software_tickers):
    fig.add_trace(go.Scatter(
        x=software_market_cap_df.index,
        y=software_market_cap_df[ticker],
        mode="lines",
        name=ticker.replace(" US Equity", ""),
        line=dict(color=colors[i], width=2)
    ))

# 레이아웃 설정 (x축 레이블 각도, 제목, 축 이름, 그리드, y축 단위 표기)
fig.update_layout(
    title="Software Market Cap (2021-Present)",
    xaxis_title="Year",
    yaxis_title="Market Cap (Billion USD)",
    xaxis=dict(
        tickangle=45,
        showgrid=True,
        gridcolor='LightGray'
    ),
    yaxis=dict(
        showgrid=True,
        gridcolor='LightGray',
        tickformat=".0f",  # 정수형 포맷
        ticksuffix="B"     # 뒤에 "B"를 붙여 십억 단위를 표현
    ),
    template="plotly_white",
    legend=dict(x=0.01, y=0.99)
)

fig.show()

###
import pandas as pd
import plotly.graph_objects as go

file_path = r"C:\Users\USER\.spyder-py3\market_data.xlsx"

# ===== Section 2: PLTR & IGV ETF Rolling Correlation (50) =====
software_price_df = pd.read_excel(file_path, sheet_name="SP", engine="openpyxl")
software_price_df.rename(columns={software_price_df.columns[0]: "Date"}, inplace=True)
software_price_df.columns = software_price_df.columns.str.replace(" US Equity", "", regex=True)
software_price_df["Date"] = pd.to_datetime(software_price_df["Date"], errors="coerce")
software_price_df.dropna(subset=["Date"], inplace=True)
software_price_df.set_index("Date", inplace=True)

# Rolling correlation 계산: window=50, min_periods=30
software_price_df["PLTR_rolling_corr"] = software_price_df["PLTR"].rolling(50, min_periods=30).corr(software_price_df["IGV"])

fig1 = go.Figure()
fig1.add_trace(go.Scatter(
    x=software_price_df.index,
    y=software_price_df["PLTR_rolling_corr"],
    mode='lines',
    name="PLTR - IGV Rolling Corr (50)",
    line=dict(color="blue", width=2)
))

fig1.update_layout(
    title="PLTR & IGV ETF Rolling Correlation (50) - 2021-Present",
    xaxis_title="Year",
    yaxis_title="Correlation",
    xaxis=dict(
        tickangle=45,
        showgrid=True,
        gridcolor="lightgray"
    ),
    yaxis=dict(
        showgrid=True,
        gridcolor="lightgray"
    ),
    template="plotly_white",
    legend=dict(x=0.01, y=0.99)
)

fig1.show()

# ===== Section 4: NVDA & SOXX ETF Rolling Correlation (50) =====
hardware_price_df = pd.read_excel(file_path, sheet_name="HP", engine="openpyxl")
hardware_price_df.rename(columns={hardware_price_df.columns[0]: "Date"}, inplace=True)
hardware_price_df.columns = hardware_price_df.columns.str.replace(" US Equity", "", regex=True)
hardware_price_df["Date"] = pd.to_datetime(hardware_price_df["Date"], errors="coerce")
hardware_price_df.dropna(subset=["Date"], inplace=True)
hardware_price_df.set_index("Date", inplace=True)

# Rolling correlation 계산: window=50, min_periods=30
hardware_price_df["NVDA_rolling_corr"] = hardware_price_df["NVDA"].rolling(50, min_periods=30).corr(hardware_price_df["SOXX"])

fig2 = go.Figure()
fig2.add_trace(go.Scatter(
    x=hardware_price_df.index,
    y=hardware_price_df["NVDA_rolling_corr"],
    mode='lines',
    name="NVDA - SOXX Rolling Corr (50)",
    line=dict(color="blue", width=2)
))

fig2.update_layout(
    title="NVDA & SOXX ETF Rolling Correlation (50) - 2016-Present",
    xaxis_title="Year",
    yaxis_title="Correlation",
    xaxis=dict(
        tickangle=45,
        showgrid=True,
        gridcolor="lightgray"
    ),
    yaxis=dict(
        showgrid=True,
        gridcolor="lightgray"
    ),
    template="plotly_white",
    legend=dict(x=0.01, y=0.99)
)

fig2.show()
###

import pandas as pd
import plotly.graph_objects as go

file_path = r"C:\Users\USER\.spyder-py3\market_data.xlsx"

# 엑셀 파일 읽기 및 데이터 전처리
vix_sp500_df = pd.read_excel(file_path, sheet_name="VIX")
vix_sp500_df.rename(columns={vix_sp500_df.columns[0]: "Date"}, inplace=True)
vix_sp500_df["Date"] = pd.to_datetime(vix_sp500_df["Date"], errors="coerce")
vix_sp500_df.dropna(subset=["Date"], inplace=True)
vix_sp500_df.set_index("Date", inplace=True)

# 월별 평균으로 리샘플링
vix_sp500_df = vix_sp500_df.resample("M").mean()

# Plotly Figure 생성 및 트레이스 추가
fig = go.Figure()

fig.add_trace(go.Scatter(
    x=vix_sp500_df.index,
    y=vix_sp500_df["VIX Index"],
    mode="lines",
    name="VIX",
    line=dict(color="blue", width=2)
))

fig.add_trace(go.Scatter(
    x=vix_sp500_df.index,
    y=vix_sp500_df["SPX INDEX"],
    mode="lines",
    name="S&P 500 Forward P/E",
    line=dict(color="red", width=2)
))

fig.update_layout(
    title="VIX & S&P 500 12M Forward P/E (1995-Present)",
    xaxis_title="Year",
    yaxis_title="Index Value",
    xaxis=dict(
        tickangle=45,
        showgrid=True,
        gridcolor="lightgray"
    ),
    yaxis=dict(
        showgrid=True,
        gridcolor="lightgray"
    ),
    template="plotly_white",
    legend=dict(x=0.95, y=0.99, xanchor="right", yanchor="top")
)

fig.show()
